---
- 
  name: Install pip and docker
  become: true 

  ansible.builtin.apt:
    pkg:
      - python3-pip
      - docker
      - docker-compose
- 
  name: Install docker's python packages
  become: true 

  ansible.builtin.pip:
    name:
      - docker
      - docker-compose
- 
  name: Log into DockerHub
  become: true 

  community.docker.docker_login:
    username: "{{ DOCKERHUB_USERNAME }}"
    password: "{{ DOCKERHUB_TOKEN }}"
    reauthorize: true
- 
  name: Remove Unknown
  become: true

  command:
    cmd: "sudo aa-remove-unknown"
-
  name: Pull the Docker image
  become: true 

  command: 
    cmd: "docker pull {{ IMAGE }}"
- 
  name: Run server
  become: true 

  community.docker.docker_compose:
    project_name: "{{ project_name }}"
    definition:
      version: '3.8'
      services:
        app:
          image: "{{ IMAGE }}"
          container_name: admin_app
          environment:
            POSTGRES_DB: "{{ POSTGRES_DB }}"
            POSTGRES_HOST: "{{ POSTGRES_HOST }}"
            POSTGRES_PORT: "{{ POSTGRES_PORT }}"
            POSTGRES_USER: "{{ POSTGRES_USER }}"
            POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"

            FASTAPI_SECRET: "{{ FASTAPI_SECRET }}"
            ADMIN_SECRET: "{{ ADMIN_SECRET }}"
          
          logging:
            options:
              max-size: "10m"
              max-file: "3"
          ports:
          - "127.0.0.1:8101:8100" 
          entrypoint: >
            /bin/sh -c "
            alembic -c src/alembic.ini upgrade head;
            uvicorn main:app --reload --proxy-headers --host 0.0.0.0 --port 8100 --workers 4
            "
          depends_on:
          - db
          restart: always
        
        admin_db:
          image: postgres:latest
          container_name: admin_db
          volumes:
            - "/{{ project_name }}_postgres-data:/var/lib/postgresql/data"
          environment:
            POSTGRES_DB: "{{ POSTGRES_DB }}"
            POSTGRES_USER: "{{ POSTGRES_USER }}"
            POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"
          ports:
            - "127.0.0.1:5434:5434"
          restart: always
          command: -p 5434
- 
  name: Prune everything
  become: true 
  community.docker.docker_prune:
    containers: true
    images: true
    networks: true
    volumes: false
    builder_cache: true 